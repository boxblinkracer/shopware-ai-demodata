<?php

namespace AIDemoData\Command;

use AIDemoData\Service\Config\ConfigService;
use AIDemoData\Service\Generator\ProductGenerator;
use AIDemoData\Service\Generator\ProductGeneratorInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

class ProductGenerateCommand extends Command implements ProductGeneratorInterface
{
    public static $defaultName = 'ai-demodata:generate:products';

    /**
     * @var ProductGenerator
     */
    private $productGenerator;

    /**
     * @var ConfigService
     */
    private $configService;

    /**
     * @var SymfonyStyle
     */
    private $io;

    /**
     * @var int
     */
    private $generatedCount = 0;
    /**
     * @var int
     */
    private $errorCount = 0;


    /**
     * @param ProductGenerator $productGenerator
     * @param ConfigService $configService
     */
    public function __construct(ProductGenerator $productGenerator, ConfigService $configService)
    {
        parent::__construct();

        $this->productGenerator = $productGenerator;
        $this->configService = $configService;
    }


    /**
     * @return void
     */
    protected function configure(): void
    {
        $this
            ->setName((string)self::$defaultName)
            ->setDescription('Generator AI product demo data with the help of OpenAI.')
            ->addOption('count', null, InputOption::VALUE_REQUIRED, 'Number of products to generate')
            ->addOption('keywords', null, InputOption::VALUE_REQUIRED, 'Keywords to generate products for')
            ->addOption('category', null, InputOption::VALUE_REQUIRED, 'The name of your category in the Storefront to append the products to.')
            ->addOption('images', null, InputOption::VALUE_REQUIRED, 'Indicates if images should be generated for the products.')
            ->addOption('images-size', null, InputOption::VALUE_REQUIRED, 'The width and height of product images in pixels. (wxh)');
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @throws \Exception
     * @return int
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->io = new SymfonyStyle($input, $output);
        $this->io->title('AI Product Demo Data Generator');

        $count = $input->getOption('count');
        $keyWords = $input->getOption('keywords');
        $category = $input->getOption('category');
        $withImages = $input->getOption('images');
        $imgSize = $input->getOption('images-size');

        $descriptionLength = $this->configService->getProductDescriptionLength();

        if ($keyWords === null) {
            throw new \Exception('No AI keywords given. Please specify what you want to be generated by providing the --keywords option.');
        }

        # -----------------------------------------------------------------------------------------------------------------------

        if ($count === false) {
            $count = 1;
        }

        if ($category === null) {
            $category = '';
        }

        if ($withImages === null) {
            $withImages = $this->configService->isProductImageEnabled();
        } else {
            $withImages = (bool)$withImages;
        }

        if ($imgSize === null) {
            $imgSize = $this->configService->getProductImageSize();
        }

        # -----------------------------------------------------------------------------------------------------------------------

        if ($category === '') {
            $this->io->note('No category given. Products will be generated without a category.');
        } else {
            $this->io->note('Products will be generated for category: ' . $category);
        }

        if ($withImages) {
            $this->io->note('Images will be generated for the products: ' . $imgSize . 'px');
        } else {
            $this->io->note('Images will not be generated for the products.');
        }


        $this->io->note('Product description length: ' . $descriptionLength . ' characters');


        # -----------------------------------------------------------------------------------------------------------------------

        # configure our generator
        $this->productGenerator->setCallback($this);
        $this->productGenerator->setGenerateImages($withImages, $imgSize);

        # -----------------------------------------------------------------------------------------------------------------------

        $this->io->writeln('Starting product generation...');

        $this->productGenerator->generate(
            $keyWords,
            $count,
            $category,
            $descriptionLength
        );

        if ($this->errorCount <= 0) {
            $this->io->success('Generated ' . $this->generatedCount . ' products for keywords');
        } else {
            $this->io->warning('Generated ' . $this->generatedCount . ' products. Errors: ' . $this->errorCount);
        }

        return 0;
    }


    /**
     * @param string $number
     * @param string $name
     * @param int $count
     * @param int $maxCount
     * @return void
     */
    public function onProductGenerating(string $number, string $name, int $count, int $maxCount): void
    {
        $this->io->section('Generating product [' . $count . '/' . $maxCount . ']: ' . $name . ' (' . $number . ')');
    }

    /**
     * @param string $number
     * @param string $name
     * @param int $count
     * @param int $maxCount
     * @return void
     */
    public function onProductGenerated(string $number, string $name, int $count, int $maxCount): void
    {
        $this->io->writeln('Product generated');

        $this->generatedCount++;
    }

    public function onProductImageGenerating(): void
    {
        $this->io->writeln('Generating product image...');
    }

    /**
     * @param string $error
     * @param int $count
     * @param int $maxCount
     * @return void
     */
    public function onProductGenerationFailed(string $error, int $count, int $maxCount): void
    {
        $this->io->writeln('Error generating product: ' . $error);

        $this->errorCount++;
    }
}
