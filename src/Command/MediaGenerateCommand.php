<?php

namespace AIDemoData\Command;

use AIDemoData\Service\Config\ConfigService;
use AIDemoData\Service\Generator\MediaGenerator;
use AIDemoData\Service\Generator\MediaGeneratorInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

class MediaGenerateCommand extends Command implements MediaGeneratorInterface
{
    public static $defaultName = 'ai-demodata:generate:media';

    /**
     * @var MediaGenerator
     */
    private $mediaGenerator;

    /**
     * @var ConfigService
     */
    private $configService;

    /**
     * @var SymfonyStyle
     */
    private $io;

    /**
     * @var int
     */
    private $generatedCount = 0;
    /**
     * @var int
     */
    private $errorCount = 0;


    /**
     * @param MediaGenerator $mediaGenerator
     * @param ConfigService $configService
     */
    public function __construct(MediaGenerator $mediaGenerator, ConfigService $configService)
    {
        parent::__construct();

        $this->mediaGenerator = $mediaGenerator;
        $this->configService = $configService;
    }


    /**
     * @return void
     */
    protected function configure(): void
    {
        $this
            ->setName((string)self::$defaultName)
            ->setDescription('Generator AI media demo data with the help of OpenAI.')
            ->addOption('count', null, InputOption::VALUE_REQUIRED, 'Number of images to generate')
            ->addOption('keywords', null, InputOption::VALUE_REQUIRED, 'Keywords to generate images for')
            ->addOption('size', null, InputOption::VALUE_REQUIRED, 'The width and height of media images in pixels. (wxh)');
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @throws \Exception
     * @return int
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->io = new SymfonyStyle($input, $output);
        $this->io->title('AI Media Demo Data Generator');

        $count = $input->getOption('count');
        $keyWords = $input->getOption('keywords');
        $size = $input->getOption('size');

        if ($keyWords === null) {
            throw new \Exception('No AI keywords given. Please specify what you want to be generated by providing the --keywords option.');
        }

        # -----------------------------------------------------------------------------------------------------------------------

        if ($count === false) {
            $count = 1;
        }

        if ($size === null) {
            $size = $this->configService->getMediaImageSize();
        }

        # -----------------------------------------------------------------------------------------------------------------------

        $this->mediaGenerator->setCallback($this);

        # -----------------------------------------------------------------------------------------------------------------------

        $this->io->writeln('Starting media generation...');

        $this->mediaGenerator->generate($keyWords, $size, $count);

        if ($this->errorCount <= 0) {
            $this->io->success('Generated ' . $this->generatedCount . ' images for keywords in CMS Media folder');
        } else {
            $this->io->warning('Generated ' . $this->generatedCount . ' images in CMS Media folder. Errors: ' . $this->errorCount);
        }

        return 0;
    }

    /**
     * @param int $count
     * @param int $maxCount
     * @return void
     */
    public function onMediaGenerated(int $count, int $maxCount): void
    {
        $this->io->writeln('Media generated');

        $this->generatedCount++;
    }

    /**
     * @param string $error
     * @param int $count
     * @param int $maxCount
     * @return void
     */
    public function onMediaGenerationFailed(string $error, int $count, int $maxCount): void
    {
        $this->io->writeln('Error generating media: ' . $error);

        $this->errorCount++;
    }
}
